### Comment API 테스트

# 먼저 로그인하여 JWT 토큰을 가져옵니다
POST http://localhost:8080/login
Content-Type: application/x-www-form-urlencoded

username=test@example.com&password=password123

> {%
    if (response.status === 200 && response.body.token) {
        client.global.set("auth_token", response.body.token);
        console.log("JWT Token saved: " + response.body.token);
    } else {
        console.log("Login failed or no token received");
    }
%}

### 테스트용 아티클 생성
POST http://localhost:8080/api/articles
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "title": "Comment Test Article",
  "description": "댓글 테스트를 위한 아티클",
  "body": "이 아티클은 댓글 기능을 테스트하기 위해 작성되었습니다. 다양한 댓글을 작성해보고 기능을 확인해보세요."
}

> {%
    if (response.status === 201 && response.body.data && response.body.data.article) {
        client.global.set("article_slug", response.body.data.article.slug);
        console.log("Test article created with slug: " + response.body.data.article.slug);
    } else {
        console.log("Test article creation failed");
    }
%}

### 1. 댓글 작성 (POST /api/articles/{slug}/comments) - 성공
POST http://localhost:8080/api/articles/{{article_slug}}/comments
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "body": "정말 유용한 글이네요! 댓글 테스트를 위한 첫 번째 댓글입니다."
}

> {%
    if (response.status === 201 && response.body.data && response.body.data.comment) {
        client.global.set("comment_id", response.body.data.comment.id);
        console.log("Comment created with ID: " + response.body.data.comment.id);
    } else {
        console.log("Comment creation failed");
    }
%}

### 2. 댓글 작성 - 유효성 검사 실패 (내용 누락)
POST http://localhost:8080/api/articles/{{article_slug}}/comments
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "body": ""
}

### 3. 댓글 작성 - 인증 없이 요청 (401 오류 예상)
POST http://localhost:8080/api/articles/{{article_slug}}/comments
Content-Type: application/json

{
  "body": "인증 없이 작성하는 댓글"
}

### 4. 존재하지 않는 아티클에 댓글 작성 (404 오류 예상)
POST http://localhost:8080/api/articles/non-existent-slug/comments
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "body": "존재하지 않는 아티클에 댓글 작성"
}

### 5. 댓글 목록 조회 (GET /api/articles/{slug}/comments)
GET http://localhost:8080/api/articles/{{article_slug}}/comments

### 6. 존재하지 않는 아티클의 댓글 조회 (404 오류 예상)
GET http://localhost:8080/api/articles/non-existent-slug/comments

### 7. 추가 댓글들 작성 (목록 테스트용)
POST http://localhost:8080/api/articles/{{article_slug}}/comments
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "body": "두 번째 댓글입니다. 아티클의 내용이 정말 흥미롭네요!"
}

###
POST http://localhost:8080/api/articles/{{article_slug}}/comments
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "body": "세 번째 댓글입니다. 좀 더 자세한 설명이 있으면 좋겠어요."
}

###
POST http://localhost:8080/api/articles/{{article_slug}}/comments
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "body": "네 번째 댓글입니다. 이런 방식의 구현이 참 깔끔하네요!"
}

### 8. 다른 사용자 생성 및 로그인 (권한 테스트용)
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "username": "commentuser2",
  "email": "comment2@example.com",
  "password": "password123"
}

###
POST http://localhost:8080/login
Content-Type: application/x-www-form-urlencoded

username=comment2@example.com&password=password123

> {%
    if (response.status === 200 && response.body.token) {
        client.global.set("other_user_token", response.body.token);
        console.log("Other user JWT Token saved: " + response.body.token);
    }
%}

### 9. 다른 사용자 댓글 작성
POST http://localhost:8080/api/articles/{{article_slug}}/comments
Content-Type: application/json
Authorization: Bearer {{other_user_token}}

{
  "body": "다른 사용자가 작성한 댓글입니다. 다른 관점에서 보면 이런 내용도 추가할 수 있을 것 같아요."
}

> {%
    if (response.status === 201 && response.body.data && response.body.data.comment) {
        client.global.set("other_user_comment_id", response.body.data.comment.id);
        console.log("Other user comment created with ID: " + response.body.data.comment.id);
    }
%}

### 10. 전체 댓글 목록 재조회 (여러 작성자 댓글 확인)
GET http://localhost:8080/api/articles/{{article_slug}}/comments

### 11. 댓글 삭제 - 권한 없는 사용자 (403 오류 예상)
DELETE http://localhost:8080/api/articles/{{article_slug}}/comments/{{comment_id}}
Authorization: Bearer {{other_user_token}}

### 12. 댓글 삭제 - 올바른 작성자 (성공)
DELETE http://localhost:8080/api/articles/{{article_slug}}/comments/{{comment_id}}
Authorization: Bearer {{auth_token}}

### 13. 다른 사용자가 자신의 댓글 삭제 (성공)
DELETE http://localhost:8080/api/articles/{{article_slug}}/comments/{{other_user_comment_id}}
Authorization: Bearer {{other_user_token}}

### 14. 이미 삭제된 댓글 삭제 시도 (404 오류 예상)
DELETE http://localhost:8080/api/articles/{{article_slug}}/comments/{{comment_id}}
Authorization: Bearer {{auth_token}}

### 15. 존재하지 않는 댓글 삭제 시도 (404 오류 예상)
DELETE http://localhost:8080/api/articles/{{article_slug}}/comments/99999
Authorization: Bearer {{auth_token}}

### 16. 인증 없이 댓글 삭제 시도 (401 오류 예상)
DELETE http://localhost:8080/api/articles/{{article_slug}}/comments/2

### 17. 최종 댓글 목록 확인
GET http://localhost:8080/api/articles/{{article_slug}}/comments

### 18. 길이가 긴 댓글 작성 테스트
POST http://localhost:8080/api/articles/{{article_slug}}/comments
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "body": "이것은 매우 긴 댓글입니다. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 한글로도 테스트해보겠습니다. 이것은 긴 한글 댓글의 예시입니다. 다양한 문자와 특수문자도 포함될 수 있습니다."
}

### 19. 특수문자가 포함된 댓글 작성 테스트
POST http://localhost:8080/api/articles/{{article_slug}}/comments
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "body": "특수문자 테스트: !@#$%^&*()_+-=[]{}|;':\",./<>? 이모지도 포함: 👍 😊 🚀 💡 그리고 코드: `console.log('Hello World');`"
}