### Article API 테스트

# 먼저 로그인하여 JWT 토큰을 가져옵니다
POST http://localhost:8080/login
Content-Type: application/x-www-form-urlencoded

username=test@example.com&password=password123

> {%
    if (response.status === 200 && response.body.token) {
        client.global.set("auth_token", response.body.token);
        console.log("JWT Token saved: " + response.body.token);
    } else {
        console.log("Login failed or no token received");
    }
%}

### 1. 아티클 생성 (POST /api/articles) - 성공
POST http://localhost:8080/api/articles
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "title": "How to Train Your Dragon",
  "description": "Ever wonder how?",
  "body": "It takes a Jacobian. You need to understand the mathematical concepts behind dragon training. The key is in the differential equations that govern dragon behavior patterns."
}

> {%
    if (response.status === 201 && response.body.data && response.body.data.article) {
        client.global.set("article_slug", response.body.data.article.slug);
        console.log("Article created with slug: " + response.body.data.article.slug);
    } else {
        console.log("Article creation failed");
    }
%}

### 2. 아티클 생성 - 유효성 검사 실패 (제목 누락)
POST http://localhost:8080/api/articles
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "description": "Ever wonder how?",
  "body": "It takes a Jacobian."
}

### 3. 아티클 생성 - 인증 없이 요청 (401 오류 예상)
POST http://localhost:8080/api/articles
Content-Type: application/json

{
  "title": "Unauthorized Article",
  "description": "This should fail",
  "body": "No authentication provided"
}

### 4. 아티클 상세 조회 (GET /api/articles/{slug})
GET http://localhost:8080/api/articles/{{article_slug}}

### 5. 존재하지 않는 아티클 조회 (404 오류 예상)
GET http://localhost:8080/api/articles/non-existent-slug

### 6. 아티클 목록 조회 (GET /api/articles)
GET http://localhost:8080/api/articles

### 7. 아티클 목록 조회 - 페이징 및 제한
GET http://localhost:8080/api/articles?offset=0&limit=10

### 8. 아티클 수정 (PUT /api/articles/{slug})
PUT http://localhost:8080/api/articles/{{article_slug}}
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "title": "How to Train Your Dragon - Updated",
  "description": "Ever wonder how? - Updated version",
  "body": "It takes a Jacobian. Updated content with more mathematical insights into dragon training methodologies."
}

### 9. 아티클 수정 - 권한 없는 사용자 (다른 사용자 토큰 필요)
# 먼저 다른 사용자로 로그인
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "username": "testuser2",
  "email": "test2@example.com",
  "password": "password123"
}

###
POST http://localhost:8080/login
Content-Type: application/x-www-form-urlencoded

username=test2@example.com&password=password123

> {%
    if (response.status === 200 && response.body.token) {
        client.global.set("other_user_token", response.body.token);
        console.log("Other user JWT Token saved: " + response.body.token);
    }
%}

###
PUT http://localhost:8080/api/articles/{{article_slug}}
Content-Type: application/json
Authorization: Bearer {{other_user_token}}

{
  "title": "Unauthorized Update",
  "description": "This should fail",
  "body": "No permission to update this article"
}

### 10. 아티클 삭제 - 권한 없는 사용자 (403 오류 예상)
DELETE http://localhost:8080/api/articles/{{article_slug}}
Authorization: Bearer {{other_user_token}}

### 11. 아티클 삭제 - 올바른 작성자 (성공)
DELETE http://localhost:8080/api/articles/{{article_slug}}
Authorization: Bearer {{auth_token}}

### 12. 이미 삭제된 아티클 조회 (404 오류 예상)
GET http://localhost:8080/api/articles/{{article_slug}}

### 13. 추가 테스트용 여러 아티클 생성
POST http://localhost:8080/api/articles
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "title": "JavaScript 기초",
  "description": "웹 개발을 위한 JavaScript 기초 지식",
  "body": "JavaScript는 웹 개발에서 필수적인 프로그래밍 언어입니다. 변수, 함수, 객체 등의 기본 개념을 이해하는 것이 중요합니다."
}

###
POST http://localhost:8080/api/articles
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "title": "Spring Boot 시작하기",
  "description": "Java 웹 애플리케이션 개발을 위한 Spring Boot",
  "body": "Spring Boot는 Spring 프레임워크를 더 쉽게 사용할 수 있도록 도와주는 도구입니다. 자동 설정과 내장 서버를 제공합니다."
}

###
POST http://localhost:8080/api/articles
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "title": "데이터베이스 설계 원칙",
  "description": "효율적인 데이터베이스 구조 설계 방법",
  "body": "좋은 데이터베이스 설계는 정규화, 인덱싱, 관계 설정 등을 고려해야 합니다. 성능과 유지보수성을 모두 고려하는 것이 중요합니다."
}

### 14. 전체 아티클 목록 재조회 (여러 아티클 확인)
GET http://localhost:8080/api/articles